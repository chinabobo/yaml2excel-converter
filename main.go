package main

import (
	"github.com/xuri/excelize/v2"
	"gopkg.in/yaml.v2"
	"os"
	"path/filepath"
	"strconv"
)

type Itemm struct {
	Name string `yaml:"name"`
	Tag  string `yaml:"tag"`
}

type AutoGenerated struct {
	// ThirdpartyImages  map[string]Itemm `yaml:"thirdparty_images"`
	ThirdpartyImages map[string]Itemm `yaml:"apulis_images"`
}

func main() {
	path := "/mnt/e/tmp/all.yaml"
	_ = readFromYamlAndWrite(path)
}

func readFromYamlAndWrite(path string) error {
	content, err := os.ReadFile(path)
	if err != nil {
		return err
	}
	data := AutoGenerated{}
	err = yaml.Unmarshal(content, &data)
	folderPath := filepath.Dir(path)

	f := excelize.NewFile()
	// create new sheet
	sheetName := "Sheet1"
	sheetName2 := "Sheet2"
	index, _ := f.NewSheet(sheetName)
	_, _ = f.NewSheet(sheetName2)
	// set value
	headerNameArray := []string{
		"ImageName",
		"ImageTag",
	}
	sheetWords := []string{
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
		"V", "W", "X", "Y", "Z",
	}
	line := 1
	for k, v := range data.ThirdpartyImages {
		f.SetCellValue(sheetName2, sheetWords[0]+strconv.Itoa(line+1), k)
		line++
		for kk, _ := range headerNameArray {
			f.SetCellValue(sheetName, sheetWords[kk]+strconv.Itoa(line), v.Name)
			f.SetCellValue(sheetName, sheetWords[kk+1]+strconv.Itoa(line), v.Tag)
		}
	}
	// set default sheet
	f.SetActiveSheet(index)
	// save file
	if err = f.SaveAs(filepath.Join(folderPath, "a.xlsx")); err != nil {
		println(err.Error())
	}
	return nil
}
